// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: DIVISION/DIVISION.proto

package GrpcServerDivision

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DivisionServiceClient is the client API for DivisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DivisionServiceClient interface {
	DivisionMethod(ctx context.Context, in *DivisionRequest, opts ...grpc.CallOption) (*DivisionResponse, error)
}

type divisionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDivisionServiceClient(cc grpc.ClientConnInterface) DivisionServiceClient {
	return &divisionServiceClient{cc}
}

func (c *divisionServiceClient) DivisionMethod(ctx context.Context, in *DivisionRequest, opts ...grpc.CallOption) (*DivisionResponse, error) {
	out := new(DivisionResponse)
	err := c.cc.Invoke(ctx, "/DIVISION.DivisionService/DivisionMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DivisionServiceServer is the server API for DivisionService service.
// All implementations must embed UnimplementedDivisionServiceServer
// for forward compatibility
type DivisionServiceServer interface {
	DivisionMethod(context.Context, *DivisionRequest) (*DivisionResponse, error)
	mustEmbedUnimplementedDivisionServiceServer()
}

// UnimplementedDivisionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDivisionServiceServer struct {
}

func (UnimplementedDivisionServiceServer) DivisionMethod(context.Context, *DivisionRequest) (*DivisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DivisionMethod not implemented")
}
func (UnimplementedDivisionServiceServer) mustEmbedUnimplementedDivisionServiceServer() {}

// UnsafeDivisionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DivisionServiceServer will
// result in compilation errors.
type UnsafeDivisionServiceServer interface {
	mustEmbedUnimplementedDivisionServiceServer()
}

func RegisterDivisionServiceServer(s grpc.ServiceRegistrar, srv DivisionServiceServer) {
	s.RegisterService(&DivisionService_ServiceDesc, srv)
}

func _DivisionService_DivisionMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivisionServiceServer).DivisionMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DIVISION.DivisionService/DivisionMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivisionServiceServer).DivisionMethod(ctx, req.(*DivisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DivisionService_ServiceDesc is the grpc.ServiceDesc for DivisionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DivisionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DIVISION.DivisionService",
	HandlerType: (*DivisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DivisionMethod",
			Handler:    _DivisionService_DivisionMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DIVISION/DIVISION.proto",
}
